<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Catálogo de Propiedades - Desarrollo Local</title>
    <style>
        :root {
            --primary: #2563eb;
            --secondary: #64748b;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --light: #f8fafc;
            --dark: #1e293b;
            --border: #e2e8f0;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif;
            background: var(--light);
            color: var(--dark);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        /* Header con estado del sistema */
        .header {
            background: var(--primary);
            color: white;
            padding: 1rem 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .header h1 {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .header-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: rgba(255,255,255,0.1);
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--success);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .stats-row {
            display: flex;
            gap: 2rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .stat {
            background: rgba(255,255,255,0.1);
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.9rem;
        }

        /* Layout principal */
        .main-layout {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 2rem;
            margin-top: 2rem;
            min-height: calc(100vh - 140px);
        }

        /* Panel de filtros mejorado */
        .filters-panel {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            height: fit-content;
            position: sticky;
            top: 2rem;
        }

        .filters-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border);
        }

        .filter-group {
            margin-bottom: 1.5rem;
        }

        .filter-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .filter-group select,
        .filter-group input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border);
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .filter-group select:focus,
        .filter-group input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .price-range {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
        }

        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: background 0.2s;
            width: 100%;
        }

        .btn:hover {
            background: #1d4ed8;
        }

        .btn-secondary {
            background: var(--secondary);
        }

        .btn-secondary:hover {
            background: #475569;
        }

        .btn-small {
            padding: 0.5rem 1rem;
            font-size: 0.8rem;
        }

        /* Área de contenido */
        .content-area {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .content-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .search-controls {
            display: flex;
            gap: 1rem;
            flex: 1;
            max-width: 600px;
        }

        .search-box {
            flex: 1;
        }

        .search-box input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border);
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .results-info {
            color: var(--secondary);
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .loading {
            display: none;
            color: var(--warning);
        }

        /* Grid de propiedades mejorado */
        .properties-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));
            gap: 1.5rem;
            padding: 1.5rem;
            min-height: 400px;
        }

        .property-card {
            border: 1px solid var(--border);
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.2s, box-shadow 0.2s;
            background: white;
            display: flex;
            flex-direction: column;
        }

        .property-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .property-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            background: #f0f0f0;
        }

        .property-content {
            padding: 1.25rem;
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .property-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark);
            line-height: 1.4;
            height: 2.8rem;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
        }

        .property-location {
            color: var(--secondary);
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .property-price {
            font-size: 1.3rem;
            font-weight: 700;
            color: var(--success);
            margin-bottom: 1rem;
        }

        .property-features {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.5rem;
            margin-top: auto;
        }

        .feature {
            text-align: center;
            padding: 0.5rem;
            background: var(--light);
            border-radius: 4px;
            font-size: 0.8rem;
        }

        .feature-value {
            display: block;
            font-weight: 600;
            color: var(--primary);
        }

        /* Paginación */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            padding: 2rem;
            border-top: 1px solid var(--border);
        }

        .pagination button {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border);
            background: white;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .pagination button:hover:not(:disabled) {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination .current-page {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        /* Estados de carga y error */
        .message {
            text-align: center;
            padding: 3rem;
            color: var(--secondary);
        }

        .error {
            color: var(--danger);
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
            border-radius: 6px;
            padding: 1rem;
            margin: 1rem;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .main-layout {
                grid-template-columns: 1fr;
            }
            
            .filters-panel {
                position: static;
            }
            
            .properties-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="container">
            <h1>Catálogo de Propiedades - Desarrollo Local</h1>
            <div class="header-info">
                <div class="status-indicator">
                    <div class="status-dot"></div>
                    <span>API: <span id="api-status">Conectando...</span></span>
                </div>
                <div class="status-indicator">
                    <span>Servidor: http://localhost:5001</span>
                </div>
            </div>
            <div class="stats-row">
                <div class="stat">Total: <span id="total-propiedades">-</span></div>
                <div class="stat">Mostrando: <span id="mostrando">0</span></div>
                <div class="stat">Página: <span id="pagina-actual">1</span></div>
                <div class="stat">Tiempo: <span id="tiempo-carga">-</span>ms</div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="main-layout">
            <!-- Panel de filtros -->
            <div class="filters-panel">
                <div class="filters-header">
                    <h3>Filtros</h3>
                    <button class="btn btn-small btn-secondary" onclick="limpiarFiltros()">Limpiar</button>
                </div>

                <div class="filter-group">
                    <label for="busqueda">Búsqueda</label>
                    <input type="text" id="busqueda" placeholder="Buscar por título...">
                </div>

                <div class="filter-group">
                    <label for="ciudad">Ciudad</label>
                    <select id="ciudad">
                        <option value="">Todas las ciudades</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="tipo_propiedad">Tipo de Propiedad</label>
                    <select id="tipo_propiedad">
                        <option value="">Todos los tipos</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="tipo_operacion">Operación</label>
                    <select id="tipo_operacion">
                        <option value="">Todas las operaciones</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label>Rango de Precio</label>
                    <div class="price-range">
                        <input type="number" id="precio_min" placeholder="Mín">
                        <input type="number" id="precio_max" placeholder="Máx">
                    </div>
                </div>

                <div class="filter-group">
                    <label for="por_pagina">Propiedades por página</label>
                    <select id="por_pagina">
                        <option value="12">12</option>
                        <option value="24" selected>24</option>
                        <option value="48">48</option>
                    </select>
                </div>

                <button class="btn" onclick="aplicarFiltros()">Aplicar Filtros</button>
            </div>

            <!-- Área de contenido -->
            <div class="content-area">
                <div class="content-header">
                    <div class="search-controls">
                        <div class="search-box">
                            <input type="text" id="busqueda-rapida" placeholder="Búsqueda rápida..." 
                                   onkeyup="busquedaRapida(this.value)">
                        </div>
                        <button class="btn" onclick="buscarPropiedades()">Buscar</button>
                    </div>
                    <div class="results-info">
                        <span id="info-resultados">Cargando...</span>
                        <span class="loading" id="loading">⏳ Cargando...</span>
                    </div>
                </div>

                <div class="properties-grid" id="propiedades-grid">
                    <div class="message">Cargando propiedades...</div>
                </div>

                <div class="pagination" id="paginacion" style="display: none;">
                    <button onclick="cambiarPagina(paginaActual - 1)" id="btn-anterior">← Anterior</button>
                    <span>Página <span id="pagina-info">1</span> de <span id="total-paginas">1</span></span>
                    <button onclick="cambiarPagina(paginaActual + 1)" id="btn-siguiente">Siguiente →</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuración
        const API_BASE = 'http://localhost:5001/api';
        let paginaActual = 1;
        let totalPaginas = 1;
        let filtrosActivos = {};
        let timeoutBusqueda = null;

        // Variables de estado
        let propiedadesTotales = 0;
        let tiempoInicio = 0;

        // Inicialización
        document.addEventListener('DOMContentLoaded', function() {
            verificarAPI();
            cargarEstadisticas();
            cargarPropiedades();
            
            // Event listeners para filtros
            document.getElementById('busqueda').addEventListener('keyup', function(e) {
                if (e.key === 'Enter') aplicarFiltros();
            });
            
            document.getElementById('busqueda-rapida').addEventListener('keyup', function(e) {
                if (e.key === 'Enter') buscarPropiedades();
            });
        });

        // Verificar conexión con API
        async function verificarAPI() {
            try {
                const response = await fetch(`${API_BASE}/../health`);
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('api-status').textContent = 'Conectado ✅';
                    document.getElementById('total-propiedades').textContent = data.propiedades_cargadas.toLocaleString();
                } else {
                    throw new Error('API no responde');
                }
            } catch (error) {
                document.getElementById('api-status').textContent = 'Error ❌';
                mostrarError('No se puede conectar con el servidor API. Asegúrate de que esté ejecutándose en localhost:5000');
            }
        }

        // Cargar estadísticas para filtros
        async function cargarEstadisticas() {
            try {
                const response = await fetch(`${API_BASE}/estadisticas`);
                const stats = await response.json();
                
                // Poblar filtros
                poblarSelect('ciudad', Object.keys(stats.por_ciudad));
                poblarSelect('tipo_propiedad', Object.keys(stats.por_tipo));
                poblarSelect('tipo_operacion', Object.keys(stats.por_operacion));
            } catch (error) {
                console.error('Error cargando estadísticas:', error);
            }
        }

        // Poblar selects con opciones
        function poblarSelect(selectId, opciones) {
            const select = document.getElementById(selectId);
            opciones.forEach(opcion => {
                if (opcion && opcion !== 'Sin ciudad' && opcion !== 'Sin tipo' && opcion !== 'Sin operación') {
                    const option = document.createElement('option');
                    option.value = opcion;
                    option.textContent = opcion.charAt(0).toUpperCase() + opcion.slice(1);
                    select.appendChild(option);
                }
            });
        }

        // Cargar propiedades
        async function cargarPropiedades(pagina = 1) {
            tiempoInicio = Date.now();
            mostrarCargando(true);
            
            try {
                const params = new URLSearchParams({
                    pagina: pagina,
                    por_pagina: document.getElementById('por_pagina').value,
                    ...filtrosActivos
                });

                const response = await fetch(`${API_BASE}/propiedades?${params}`);
                
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                mostrarPropiedades(data.propiedades);
                actualizarPaginacion(data);
                actualizarStats(data);
                
                paginaActual = data.pagina;
                totalPaginas = data.total_paginas;
                
            } catch (error) {
                console.error('Error cargando propiedades:', error);
                mostrarError('Error cargando propiedades: ' + error.message);
            } finally {
                mostrarCargando(false);
            }
        }

        // Mostrar propiedades en el grid
        function mostrarPropiedades(propiedades) {
            const grid = document.getElementById('propiedades-grid');
            
            if (!propiedades || propiedades.length === 0) {
                grid.innerHTML = '<div class="message">No se encontraron propiedades</div>';
                return;
            }

            grid.innerHTML = propiedades.map(prop => `
                <div class="property-card" onclick="verDetalle('${prop.id}')">
                    <img class="property-image" 
                         src="${prop.imagen_portada?.url || 'Imagen_no_disponible.jpg'}" 
                         alt="${prop.titulo}" 
                         onerror="this.src='Imagen_no_disponible.jpg'">
                    <div class="property-content">
                        <h3 class="property-title">${prop.titulo || 'Sin título'}</h3>
                        <p class="property-location">${formatearUbicacion(prop)}</p>
                        <p class="property-price">${formatearPrecio(prop.precio)}</p>
                        <div class="property-features">
                            <div class="feature">
                                <span class="feature-value">${prop.caracteristicas?.recamaras || '?'}</span>
                                Recámaras
                            </div>
                            <div class="feature">
                                <span class="feature-value">${prop.caracteristicas?.banos || '?'}</span>
                                Baños
                            </div>
                            <div class="feature">
                                <span class="feature-value">${prop.caracteristicas?.estacionamientos || '?'}</span>
                                Autos
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Formatear ubicación
        function formatearUbicacion(prop) {
            const partes = [];
            if (prop.colonia) partes.push(prop.colonia);
            if (prop.ciudad) partes.push(prop.ciudad);
            return partes.join(', ') || 'Ubicación no especificada';
        }

        // Formatear precio
        function formatearPrecio(precio) {
            if (!precio || !precio.valor) return 'Precio no disponible';
            
            const valor = precio.valor;
            const moneda = precio.moneda === 'USD' ? '$' : '$';
            
            if (valor >= 1000000) {
                return `${moneda}${(valor / 1000000).toFixed(1)}M`;
            } else if (valor >= 1000) {
                return `${moneda}${(valor / 1000).toFixed(0)}K`;
            } else {
                return `${moneda}${valor.toLocaleString()}`;
            }
        }

        // Actualizar paginación
        function actualizarPaginacion(data) {
            const paginacion = document.getElementById('paginacion');
            const btnAnterior = document.getElementById('btn-anterior');
            const btnSiguiente = document.getElementById('btn-siguiente');
            
            document.getElementById('pagina-info').textContent = data.pagina;
            document.getElementById('total-paginas').textContent = data.total_paginas;
            
            btnAnterior.disabled = !data.tiene_anterior;
            btnSiguiente.disabled = !data.tiene_siguiente;
            
            paginacion.style.display = data.total_paginas > 1 ? 'flex' : 'none';
        }

        // Actualizar estadísticas
        function actualizarStats(data) {
            const tiempoFinal = Date.now() - tiempoInicio;
            document.getElementById('mostrando').textContent = data.propiedades.length;
            document.getElementById('pagina-actual').textContent = data.pagina;
            document.getElementById('tiempo-carga').textContent = tiempoFinal;
            document.getElementById('info-resultados').textContent = 
                `${data.total.toLocaleString()} propiedades encontradas`;
        }

        // Cambiar página
        function cambiarPagina(nuevaPagina) {
            if (nuevaPagina >= 1 && nuevaPagina <= totalPaginas) {
                cargarPropiedades(nuevaPagina);
            }
        }

        // Aplicar filtros
        function aplicarFiltros() {
            filtrosActivos = {};
            
            // Recoger valores de filtros
            const ciudad = document.getElementById('ciudad').value;
            const tipoPropiedad = document.getElementById('tipo_propiedad').value;
            const tipoOperacion = document.getElementById('tipo_operacion').value;
            const precioMin = document.getElementById('precio_min').value;
            const precioMax = document.getElementById('precio_max').value;
            
            if (ciudad) filtrosActivos.ciudad = ciudad;
            if (tipoPropiedad) filtrosActivos.tipo_propiedad = tipoPropiedad;
            if (tipoOperacion) filtrosActivos.tipo_operacion = tipoOperacion;
            if (precioMin) filtrosActivos.precio_min = precioMin;
            if (precioMax) filtrosActivos.precio_max = precioMax;
            
            cargarPropiedades(1);
        }

        // Limpiar filtros
        function limpiarFiltros() {
            document.getElementById('ciudad').value = '';
            document.getElementById('tipo_propiedad').value = '';
            document.getElementById('tipo_operacion').value = '';
            document.getElementById('precio_min').value = '';
            document.getElementById('precio_max').value = '';
            document.getElementById('busqueda').value = '';
            
            filtrosActivos = {};
            cargarPropiedades(1);
        }

        // Búsqueda rápida
        function busquedaRapida(termino) {
            clearTimeout(timeoutBusqueda);
            timeoutBusqueda = setTimeout(() => {
                if (termino.length >= 2) {
                    buscarPropiedades(termino);
                } else if (termino.length === 0) {
                    cargarPropiedades(1);
                }
            }, 500);
        }

        // Buscar propiedades
        async function buscarPropiedades(termino = null) {
            const terminoBusqueda = termino || document.getElementById('busqueda-rapida').value;
            
            if (!terminoBusqueda || terminoBusqueda.length < 2) {
                cargarPropiedades(1);
                return;
            }

            tiempoInicio = Date.now();
            mostrarCargando(true);
            
            try {
                const params = new URLSearchParams({
                    q: terminoBusqueda,
                    pagina: 1,
                    por_pagina: document.getElementById('por_pagina').value
                });

                const response = await fetch(`${API_BASE}/buscar?${params}`);
                const data = await response.json();
                
                mostrarPropiedades(data.propiedades);
                actualizarPaginacion(data);
                actualizarStats(data);
                
            } catch (error) {
                console.error('Error en búsqueda:', error);
                mostrarError('Error en la búsqueda: ' + error.message);
            } finally {
                mostrarCargando(false);
            }
        }

        // Ver detalle de propiedad
        function verDetalle(propiedadId) {
            // Abrir en nueva ventana o mostrar modal
            const url = `${API_BASE}/propiedades/${propiedadId}`;
            window.open(url, '_blank');
        }

        // Mostrar/ocultar indicador de carga
        function mostrarCargando(mostrar) {
            const loading = document.getElementById('loading');
            loading.style.display = mostrar ? 'block' : 'none';
        }

        // Mostrar mensaje de error
        function mostrarError(mensaje) {
            const grid = document.getElementById('propiedades-grid');
            grid.innerHTML = `<div class="error">${mensaje}</div>`;
        }
    </script>
</body>
</html> 
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Cat√°logo de Propiedades</title>
  <style>
    :root {
      --primary-color: #234;
      --text-color: #333;
      --border-color: #ddd;
      --hover-color: #f5f5f5;
      --price-color: #059669;
      --card-shadow: 0 2px 6px rgba(0,0,0,.1);
      --transition: all 0.3s ease;
    }
    
    body { 
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, 
                 "Helvetica Neue", Arial, sans-serif; 
      background: #f5f5f5; 
      margin: 0; 
      padding: 0;
      color: var(--text-color);
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    * { box-sizing: border-box; }
    
    header { 
      background: var(--primary-color); 
      color: #fff; 
      padding: 1.5rem;
      text-align: center;
      box-shadow: 0 2px 4px rgba(0,0,0,.1);
    }
    
    header h1 { 
      margin: 0 0 .5rem; 
      font-size: 2rem;
      font-weight: 600;
    }
    
    header p { 
      margin: 0;
      font-size: 1rem;
      opacity: 0.9;
    }
    
    main { 
      display: flex;
      flex: 1;
      height: calc(100vh - 98px);
    }
    
    #filters {
      width: 280px;
      background: #fff;
      padding: 1.5rem;
      border-right: 1px solid var(--border-color);
      overflow-y: auto;
      flex-shrink: 0;
    }
    
    #filters section { 
      margin-bottom: 2rem;
    }
    
    #filters section:last-child {
      margin-bottom: 1rem;
    }
    
    #filters section strong { 
      display: block;
      margin-bottom: 1rem;
      font-size: 1rem;
      color: var(--text-color);
      text-transform: capitalize;
    }
    
    #filters label { 
      display: block;
      margin-bottom: .75rem;
      cursor: pointer;
      transition: var(--transition);
      padding: .25rem;
      border-radius: 4px;
      text-transform: capitalize;
    }
    
    #filters label:hover {
      background: var(--hover-color);
    }
    
    #filters input[type="text"],
    #filters input[type="number"],
    #filters select { 
      width: 100%;
      padding: .5rem;
      margin-top: .5rem;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      font-size: .9rem;
    }
    
    #filters input[type="checkbox"] {
      margin-right: .5rem;
    }
    
    #cardsContainer {
      flex: 1;
      padding: 1.5rem;
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      gap: 1.5rem;
      overflow-y: auto;
      align-content: start;
      background: #f5f5f5;
    }
    
    .card { 
      background: #fff;
      border-radius: 8px;
      box-shadow: var(--card-shadow);
      display: flex;
      flex-direction: column;
      overflow: hidden;
      transition: var(--transition);
      height: fit-content;
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }
    
    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,.15);
    }
    
    .card img { 
      width: 100%;
      height: 220px;
      object-fit: cover;
      background: #eee;
      display: block;
      transition: var(--transition);
    }
    
    .card:hover img {
      transform: scale(1.05);
    }
    
    .card-content { 
      padding: 1.25rem;
      flex: 1;
      display: flex;
      flex-direction: column;
      background: #fff;
    }
    
    .card-content h3 { 
      margin: 0 0 .5rem; 
      font-size: 1.2rem;
      line-height: 1.4;
      color: var(--text-color);
      text-transform: capitalize;
    }
    
    .card-content h3 a { 
      color: inherit;
      text-decoration: none;
      transition: var(--transition);
    }
    
    .card-content h3 a:hover { 
      color: var(--price-color);
    }
    
    .direccion-completa {
      font-size: 0.9rem;
      color: #666;
      margin: 0 0 .75rem;
      line-height: 1.4;
    }
    
    .location { 
      font-size: .95rem;
      color: #666;
      margin-bottom: 1rem;
      line-height: 1.4;
      text-transform: capitalize;
    }
    
    .price { 
      color: var(--price-color);
      font-weight: 600;
      margin-bottom: 1rem;
      font-size: 1.2rem;
    }
    
    .fields { 
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: .75rem;
      font-size: .9rem;
      margin-bottom: 1rem;
      color: #555;
    }
    
    .fields > div {
      padding: .5rem;
      background: #f8f8f8;
      border-radius: 4px;
      text-align: center;
    }
    
    details { 
      margin-top: auto;
      border-top: 1px solid var(--border-color);
      padding-top: 1rem;
    }
    
    details summary { 
      cursor: pointer;
      color: #666;
      font-weight: 500;
      margin-bottom: .75rem;
      outline: none;
    }
    
    details summary:hover {
      color: var(--price-color);
    }
    
    details p {
      margin: 0;
      font-size: .95rem;
      line-height: 1.5;
      color: #444;
      max-height: 200px;
      overflow-y: auto;
      padding-right: 10px;
    }
    
    .no-results { 
      grid-column: 1/-1;
      text-align: center;
      padding: 3rem;
      color: #666;
      background: #fff;
      border-radius: 8px;
      box-shadow: var(--card-shadow);
    }
    
    @media (max-width: 768px) {
      main {
        flex-direction: column;
        height: auto;
      }
      
      #filters {
        width: 100%;
        height: auto;
        border-right: none;
        border-bottom: 1px solid var(--border-color);
      }
      
      #cardsContainer {
        height: auto;
      }
    }
    
    .tipo-operacion {
      position: absolute;
      top: 10px;
      right: 10px;
      padding: 5px 10px;
      border-radius: 4px;
      color: white;
      font-weight: bold;
      text-transform: uppercase;
      font-size: 0.8rem;
    }
    
    .tipo-operacion.venta {
      background-color: #059669;
    }
    
    .tipo-operacion.renta {
      background-color: #2563eb;
    }
    
    .tipo-operacion.desconocido {
      background-color: #6b7280;
    }
    
    .image-container {
      position: relative;
      overflow: hidden;
    }
  </style>
</head>
<body>

  <header>
    <h1>Cat√°logo de Propiedades</h1>
    <p id="resumen">Encuentra tu pr√≥xima propiedad</p>
  </header>

  <main>
    <aside id="filters">
      <!-- Ordenar (movido arriba) -->
      <section>
        <strong>‚öôÔ∏è Ordenar</strong>
        <select id="sortOrder">
          <option value="none">Sin orden</option>
          <option value="asc">Precio Menor a Mayor</option>
          <option value="desc">Precio Mayor a Menor</option>
        </select>
      </section>

      <!-- Buscar y Precio -->
      <section>
        <strong>üîç Buscar</strong>
        <input id="searchInput" type="text" placeholder="Buscar por ubicaci√≥n, caracter√≠sticas..." />
      </section>
      <section>
        <strong>üí∞ Precio</strong>
        <label>Min <input id="precioMin" type="number" placeholder="0"></label>
        <label>Max <input id="precioMax" type="number" placeholder="‚àû"></label>
      </section>

      <!-- Ciudad din√°mico -->
      <section>
        <strong>üåç Ciudad</strong>
        <div id="filterCiudad"></div>
      </section>

      <!-- Operaci√≥n -->
      <section>
        <strong>ü§ù Operaci√≥n</strong>
        <label><input type="checkbox" name="operacion" value="Venta"> Venta (<span id="countVenta">0</span>)</label>
        <label><input type="checkbox" name="operacion" value="Renta"> Renta (<span id="countRenta">0</span>)</label>
      </section>

      <!-- Tipo de Propiedad -->
      <section>
        <strong>üè† Tipo de Propiedad</strong>
        <div id="filterTipoPropiedad"></div>
      </section>

      <!-- Amenidades -->
      <section>
        <strong>‚ú® Amenidades</strong>
        <div id="filterAmenidades"></div>
      </section>

      <!-- Caracter√≠sticas -->
      <section>
        <strong>üìã Caracter√≠sticas</strong>
        <div id="filterCaracteristicas"></div>
      </section>

      <!-- Propiedad con -->
      <section>
        <strong>üè∑Ô∏è Propiedad con</strong>
        <label><input type="checkbox" name="escrituras" value="true"> Escrituras (<span id="countEscrituras">0</span>)</label>
        <label><input type="checkbox" name="cesion_derechos" value="true"> Cesi√≥n de derecho (<span id="countCesion">0</span>)</label>
      </section>
    </aside>

    <section id="cardsContainer"></section>
  </main>

  <script>
    let propiedades = [];
    let filtrosActivos = {
      texto: '',
      precioMin: null,
      precioMax: null,
      operacion: [],
      tipoPropiedad: [],
      ciudad: [],
      amenidades: [],
      caracteristicas: [],
      escrituras: false,
      cesionDerechos: false
    };

    // Funci√≥n para parsear el precio del texto
    function parsePrecioTexto(precioTexto) {
      if (!precioTexto) return 0;
      // Remover el s√≠mbolo de moneda y espacios
      let precio = precioTexto.replace('$', '').trim();
      // Reemplazar puntos por nada (formato mexicano usa punto como separador de miles)
      precio = precio.replace(/\./g, '');
      // Reemplazar comas por puntos para decimales si existen
      precio = precio.replace(',', '.');
      return parseFloat(precio);
    }

    // Funci√≥n para formatear precios
    function formatearPrecio(precioData, propiedad) {
      try {
        // Si el precio viene directamente en la propiedad
        if (propiedad.precio) {
          if (typeof propiedad.precio === 'number') {
            return new Intl.NumberFormat('es-MX', {
              style: 'currency',
              currency: 'MXN',
              minimumFractionDigits: 0,
              maximumFractionDigits: 0
            }).format(propiedad.precio);
          }
          if (typeof propiedad.precio === 'string') {
            const valor = parsePrecioTexto(propiedad.precio);
            if (valor > 0) {
              return new Intl.NumberFormat('es-MX', {
                style: 'currency',
                currency: 'MXN',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              }).format(valor);
            }
          }
        }

        // Si el precio viene en propiedad.propiedad.precio
        if (propiedad.propiedad && propiedad.propiedad.precio) {
          const precioPropiedad = propiedad.propiedad.precio;
          
          // Si es un n√∫mero
          if (typeof precioPropiedad === 'number') {
            return new Intl.NumberFormat('es-MX', {
              style: 'currency',
              currency: 'MXN',
              minimumFractionDigits: 0,
              maximumFractionDigits: 0
            }).format(precioPropiedad);
          }
          
          // Si es un string
          if (typeof precioPropiedad === 'string') {
            const valor = parsePrecioTexto(precioPropiedad);
            if (valor > 0) {
              return new Intl.NumberFormat('es-MX', {
                style: 'currency',
                currency: 'MXN',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              }).format(valor);
            }
          }
          
          // Si es un objeto con valor
          if (typeof precioPropiedad === 'object' && precioPropiedad !== null) {
            if (precioPropiedad.valor) {
              const valor = parseFloat(precioPropiedad.valor);
              if (!isNaN(valor) && valor > 0) {
                return new Intl.NumberFormat('es-MX', {
                  style: 'currency',
                  currency: 'MXN',
                  minimumFractionDigits: 0,
                  maximumFractionDigits: 0
                }).format(valor);
              }
            }
            if (precioPropiedad.texto) {
              const valor = parsePrecioTexto(precioPropiedad.texto);
              if (valor > 0) {
                return new Intl.NumberFormat('es-MX', {
                  style: 'currency',
                  currency: 'MXN',
                  minimumFractionDigits: 0,
                  maximumFractionDigits: 0
                }).format(valor);
              }
            }
          }
        }

        // Si el precio viene en precioData
        if (precioData) {
          // Si es un n√∫mero
          if (typeof precioData === 'number') {
            return new Intl.NumberFormat('es-MX', {
              style: 'currency',
              currency: 'MXN',
              minimumFractionDigits: 0,
              maximumFractionDigits: 0
            }).format(precioData);
          }
          
          // Si es un string
          if (typeof precioData === 'string') {
            const valor = parsePrecioTexto(precioData);
            if (valor > 0) {
              return new Intl.NumberFormat('es-MX', {
                style: 'currency',
                currency: 'MXN',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              }).format(valor);
            }
          }
          
          // Si es un objeto
          if (typeof precioData === 'object' && precioData !== null) {
            if (precioData.valor) {
              const valor = parseFloat(precioData.valor);
              if (!isNaN(valor) && valor > 0) {
                return new Intl.NumberFormat('es-MX', {
                  style: 'currency',
                  currency: 'MXN',
                  minimumFractionDigits: 0,
                  maximumFractionDigits: 0
                }).format(valor);
              }
            }
            if (precioData.texto) {
              const valor = parsePrecioTexto(precioData.texto);
              if (valor > 0) {
                return new Intl.NumberFormat('es-MX', {
                  style: 'currency',
                  currency: 'MXN',
                  minimumFractionDigits: 0,
                  maximumFractionDigits: 0
                }).format(valor);
              }
            }
          }
        }
        
        return 'Precio no disponible';
      } catch (error) {
        console.error('Error formateando precio:', error);
        return 'Precio no disponible';
      }
    }

    // Funci√≥n para extraer valor num√©rico del precio
    function extraerValorPrecio(precioData, propiedad) {
      // Primero intentar obtener el precio del repositorio
      if (propiedad.precio) {
        // Si es string, parsearlo
        if (typeof propiedad.precio === 'string') {
          return parsePrecioTexto(propiedad.precio);
        }
        // Si es objeto con valor
        if (typeof propiedad.precio === 'object' && propiedad.precio.valor) {
          return propiedad.precio.valor;
        }
      }
      
      // Si no existe en el repositorio, intentar con el precio estructurado
      if (precioData && typeof precioData === 'object') {
        // Primero intentar con el texto original
        if (precioData.texto) {
          return parsePrecioTexto(precioData.texto);
        }
        // Si no hay texto, usar el valor
        if (precioData.valor) {
          return precioData.valor;
        }
      }
      
      return 0;
    }

    // Cargar datos
    async function cargarDatos() {
      try {
        const timestamp = new Date().getTime();
        const response = await fetch(`resultados/propiedades_estructuradas.json?t=${timestamp}`);
        const data = await response.json();
        propiedades = data.propiedades;
        
        // Inicializar la interfaz
        inicializarFiltros();
        mostrarPropiedades();
        actualizarResumen();
      } catch (error) {
        console.error('Error cargando datos:', error);
      }
    }

    function inicializarFiltros() {
      // Inicializar ciudades
      const ciudades = [...new Set(propiedades.map(p => p.ubicacion?.ciudad).filter(Boolean))];
      const filterCiudad = document.getElementById('filterCiudad');
      ciudades.forEach(ciudad => {
        const count = propiedades.filter(p => p.ubicacion?.ciudad === ciudad).length;
        filterCiudad.innerHTML += `
          <label>
            <input type="checkbox" name="ciudad" value="${ciudad}"> 
            ${ciudad} (${count})
          </label>
        `;
      });

      // Inicializar tipos de propiedad
      const tiposPropiedad = [...new Set(propiedades.map(p => p.propiedad?.tipo_propiedad).filter(Boolean))];
      const filterTipoPropiedad = document.getElementById('filterTipoPropiedad');
      tiposPropiedad.sort().forEach(tipo => {
        const count = propiedades.filter(p => p.propiedad?.tipo_propiedad === tipo).length;
        const tipoMostrado = tipo.replace(/_/g, ' ');
        filterTipoPropiedad.innerHTML += `
          <label>
            <input type="checkbox" name="tipoPropiedad" value="${tipo}"> 
            ${tipoMostrado} (${count})
          </label>
        `;
      });

      // Inicializar amenidades
      const amenidadesComunes = ['alberca', 'jardin', 'estacionamiento', 'areas_comunes'];
      const filterAmenidades = document.getElementById('filterAmenidades');
      amenidadesComunes.forEach(amenidad => {
        const count = propiedades.filter(p => {
          if (!p.amenidades) return false;
          const amenidadObj = p.amenidades[amenidad];
          return amenidadObj && (
            amenidadObj.presente === true ||
            amenidadObj.presentes === true ||
            (Array.isArray(amenidadObj.tipos) && amenidadObj.tipos.length > 0)
          );
        }).length;
        const amenidadMostrada = amenidad.replace(/_/g, ' ');
        filterAmenidades.innerHTML += `
          <label>
            <input type="checkbox" name="amenidades" value="${amenidad}"> 
            ${amenidadMostrada} (${count})
          </label>
        `;
      });

      // Inicializar caracter√≠sticas
      const caracteristicasComunes = ['recamara_planta_baja', 'un_nivel', 'opcion_crecer'];
      const filterCaracteristicas = document.getElementById('filterCaracteristicas');
      caracteristicasComunes.forEach(caracteristica => {
        // Contar solo propiedades que son estrictamente de un nivel
        const count = caracteristica === 'un_nivel' ?
          propiedades.filter(p => 
            p.caracteristicas && 
            p.caracteristicas[caracteristica] === true && 
            (!p.caracteristicas.niveles || p.caracteristicas.niveles === 1) &&
            !p.caracteristicas.tiene_planta_alta
          ).length :
          propiedades.filter(p => p.caracteristicas && p.caracteristicas[caracteristica] === true).length;
        
        const caracteristicaMostrada = caracteristica.replace(/_/g, ' ');
        filterCaracteristicas.innerHTML += `
          <label>
            <input type="checkbox" name="caracteristicas" value="${caracteristica}"> 
            ${caracteristicaMostrada} (${count})
          </label>
        `;
      });

      // Actualizar contadores de escrituras y cesi√≥n
      document.getElementById('countEscrituras').textContent = 
        propiedades.filter(p => p.legal && p.legal.escrituras === true).length;
      document.getElementById('countCesion').textContent = 
        propiedades.filter(p => p.legal && p.legal.cesion_derechos === true).length;

      // Inicializar eventos de filtros
      document.getElementById('searchInput').addEventListener('input', (e) => {
        filtrosActivos.texto = e.target.value.toLowerCase();
        mostrarPropiedades();
      });

      document.getElementById('precioMin').addEventListener('input', (e) => {
        filtrosActivos.precioMin = e.target.value ? parseFloat(e.target.value) : null;
        mostrarPropiedades();
      });

      document.getElementById('precioMax').addEventListener('input', (e) => {
        filtrosActivos.precioMax = e.target.value ? parseFloat(e.target.value) : null;
        mostrarPropiedades();
      });

      // Eventos para checkboxes
      document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        checkbox.addEventListener('change', (e) => {
          const tipo = e.target.name;
          const valor = e.target.value;
          
          switch(tipo) {
            case 'operacion':
              if (e.target.checked) {
                filtrosActivos.operacion.push(valor);
              } else {
                filtrosActivos.operacion = filtrosActivos.operacion.filter(v => v !== valor);
              }
              break;
            case 'tipoPropiedad':
              if (e.target.checked) {
                filtrosActivos.tipoPropiedad.push(valor);
              } else {
                filtrosActivos.tipoPropiedad = filtrosActivos.tipoPropiedad.filter(v => v !== valor);
              }
              break;
            case 'ciudad':
              if (e.target.checked) {
                filtrosActivos.ciudad.push(valor);
              } else {
                filtrosActivos.ciudad = filtrosActivos.ciudad.filter(v => v !== valor);
              }
              break;
            case 'amenidades':
              if (e.target.checked) {
                filtrosActivos.amenidades.push(valor);
              } else {
                filtrosActivos.amenidades = filtrosActivos.amenidades.filter(v => v !== valor);
              }
              break;
            case 'caracteristicas':
              if (e.target.checked) {
                filtrosActivos.caracteristicas.push(valor);
              } else {
                filtrosActivos.caracteristicas = filtrosActivos.caracteristicas.filter(v => v !== valor);
              }
              break;
            case 'escrituras':
              filtrosActivos.escrituras = e.target.checked;
              break;
            case 'cesion_derechos':
              filtrosActivos.cesionDerechos = e.target.checked;
              break;
          }
          
          mostrarPropiedades();
        });
      });

      // Ordenamiento
      document.getElementById('sortOrder').addEventListener('change', e => {
        mostrarPropiedades();
      });
    }

    function actualizarResumen() {
      try {
        const totalPropiedades = propiedades.length;
        const resumen = document.getElementById('resumen');
        
        if (!resumen) {
          console.error('Elemento resumen no encontrado en el DOM');
          return;
        }
        
        resumen.textContent = `${totalPropiedades} propiedades disponibles`;
      } catch (error) {
        console.error('Error actualizando resumen:', error);
      }
    }

    function filtrarPropiedades() {
      return propiedades.filter(propiedad => {
        try {
          // Filtro de texto
            const textoPropiedad = `
              ${propiedad.titulo || ''} 
              ${propiedad.descripcion_original || ''} 
              ${propiedad.ubicacion?.ciudad || ''}
            `.toLowerCase();
            
          if (filtrosActivos.texto && !textoPropiedad.includes(filtrosActivos.texto)) return false;

          // Filtro de precio
          if (propiedad.propiedad?.precio) {
            const precio = extraerValorPrecio(propiedad.propiedad.precio, propiedad);
            if (precio > 0) {
              if (filtrosActivos.precioMin && precio < filtrosActivos.precioMin) return false;
              if (filtrosActivos.precioMax && precio > filtrosActivos.precioMax) return false;
            }
          }

          // Filtro de tipo de operaci√≥n
          if (filtrosActivos.operacion.length > 0) {
            const tipoOperacion = propiedad.propiedad?.tipo_operacion?.toLowerCase() || '';
            if (!filtrosActivos.operacion.some(op => op.toLowerCase() === tipoOperacion)) return false;
          }

          // Filtro de tipo de propiedad
          if (filtrosActivos.tipoPropiedad.length > 0) {
            if (!filtrosActivos.tipoPropiedad.includes(propiedad.propiedad?.tipo_propiedad)) return false;
          }

          // Filtro de ciudad
          if (filtrosActivos.ciudad.length > 0) {
            if (!filtrosActivos.ciudad.includes(propiedad.ubicacion?.ciudad)) return false;
          }

          // Filtro de amenidades
          if (filtrosActivos.amenidades.length > 0) {
            const tieneAmenidad = filtrosActivos.amenidades.every(amenidad => {
              if (!propiedad.amenidades) return false;
              const amenidadObj = propiedad.amenidades[amenidad];
              return amenidadObj && (
                amenidadObj.presente === true ||
                amenidadObj.presentes === true ||
                (Array.isArray(amenidadObj.tipos) && amenidadObj.tipos.length > 0) ||
                (Array.isArray(amenidadObj.detalles) && amenidadObj.detalles.length > 0)
              );
            });
            if (!tieneAmenidad) return false;
          }

          // Filtro de caracter√≠sticas
          if (filtrosActivos.caracteristicas.length > 0) {
            const tieneCaracteristica = filtrosActivos.caracteristicas.every(caracteristica => {
              if (caracteristica === 'un_nivel') {
                // Verificar que la propiedad sea estrictamente de un nivel
                return propiedad.caracteristicas && 
                       propiedad.caracteristicas.un_nivel === true &&
                       (!propiedad.caracteristicas.niveles || propiedad.caracteristicas.niveles === 1) &&
                       !propiedad.caracteristicas.tiene_planta_alta;
              }
              return propiedad.caracteristicas && propiedad.caracteristicas[caracteristica] === true;
            });
            if (!tieneCaracteristica) return false;
          }

          // Filtro de escrituras
          if (filtrosActivos.escrituras) {
            if (!propiedad.legal || propiedad.legal.escrituras !== true) return false;
          }

          // Filtro de cesi√≥n de derechos
          if (filtrosActivos.cesionDerechos) {
            if (!propiedad.legal || propiedad.legal.cesion_derechos !== true) return false;
          }

          return true;
        } catch (error) {
          console.error('Error filtrando propiedad:', error);
          return false;
        }
      });
    }

    function mostrarPropiedades() {
      const propiedadesFiltradas = filtrarPropiedades();
      const container = document.getElementById('cardsContainer');
      container.innerHTML = '';
      
      console.log('Total de propiedades filtradas:', propiedadesFiltradas.length);
      
      if (propiedadesFiltradas.length === 0) {
        container.innerHTML = `
          <div class="no-results">
            <h3>No se encontraron propiedades</h3>
            <p>Intenta ajustar los filtros de b√∫squeda</p>
          </div>
        `;
        return;
      }
      
      // Mostrar ejemplo de una propiedad para depuraci√≥n
      console.log('Ejemplo de propiedad filtrada:', JSON.stringify(propiedadesFiltradas[0], null, 2));
      console.log('Direcci√≥n de la primera propiedad:', propiedadesFiltradas[0]?.ubicacion?.direccion_completa);
      
      // Ordenar propiedades seg√∫n el criterio seleccionado
      const sortOrder = document.getElementById('sortOrder').value;
      if (sortOrder !== 'none') {
        propiedadesFiltradas.sort((a, b) => {
          const precioA = extraerValorPrecio(a.propiedad?.precio, a);
          const precioB = extraerValorPrecio(b.propiedad?.precio, b);
          return sortOrder === 'asc' ? precioA - precioB : precioB - precioA;
        });
      }
      
      propiedadesFiltradas.forEach(propiedad => {
        const card = document.createElement('div');
        card.className = 'card';
        
        // Obtener la imagen de portada
        let imagenUrl = 'resultados/Imagen_no_disponible.jpg';
        if (propiedad.datos_originales?.imagen_portada) {
          imagenUrl = 'resultados/' + propiedad.datos_originales.imagen_portada.ruta_relativa;
        } else if (propiedad.datos_originales?.imagenes && propiedad.datos_originales.imagenes.length > 0) {
          const primeraImagen = propiedad.datos_originales.imagenes[0];
          imagenUrl = primeraImagen.ruta_relativa ? 'resultados/' + primeraImagen.ruta_relativa : primeraImagen;
        }
        
        // Capitalizar el t√≠tulo y usar un t√≠tulo por defecto si no existe
        const tipoPropiedad = propiedad.propiedad?.tipo_propiedad ? 
          propiedad.propiedad.tipo_propiedad.replace(/_/g, ' ') : '';
        const titulo = tipoPropiedad ? 
          `${tipoPropiedad} en ${propiedad.ubicacion?.ciudad || ''}` :
          'Propiedad';
        
        // Formatear precio
        const precio = formatearPrecio(propiedad.propiedad?.precio, propiedad);
        const tipoOperacion = determinarTipoOperacion(propiedad);
        
        // Crear el contenido de la tarjeta
        card.innerHTML = `
          <div class="image-container">
            <a href="${propiedad.link}" target="_blank">
              <img src="${imagenUrl}" alt="${titulo}" onerror="this.src='resultados/Imagen_no_disponible.jpg'">
            </a>
            <div class="tipo-operacion ${tipoOperacion.toLowerCase()}">${tipoOperacion}</div>
          </div>
          <div class="card-content">
            <h3>
              ${propiedad.link ? 
                `<a href="${propiedad.link}" target="_blank" rel="noopener noreferrer">
                  ${titulo}
                </a>` : 
                titulo
              }
            </h3>
            <p class="direccion-completa">üìç ${propiedad.ubicacion?.direccion_completa || ''}</p>
            <div class="price">${precio}</div>
            <div class="fields">
              ${propiedad.caracteristicas?.recamaras ? 
                `<div>üõèÔ∏è ${propiedad.caracteristicas.recamaras} Rec</div>` : ''}
              ${propiedad.caracteristicas?.banos ? 
                `<div>üöø ${propiedad.caracteristicas.banos} Ba√±os</div>` : ''}
              ${propiedad.caracteristicas?.superficie_m2 ? 
                `<div>üìè ${propiedad.caracteristicas.superficie_m2}m¬≤</div>` : ''}
              ${propiedad.caracteristicas?.estacionamientos?.cantidad ? 
                `<div>üöó ${propiedad.caracteristicas.estacionamientos.cantidad} Est</div>` : ''}
            </div>
            <details>
              <summary>Ver descripci√≥n</summary>
              <p>${propiedad.descripcion_original || 'No hay descripci√≥n disponible'}</p>
            </details>
          </div>
        `;
        
        container.appendChild(card);
      });
      
      // Actualizar contadores
      actualizarContadores();
      
      // Actualizar resumen
      document.getElementById('resumen').textContent = 
        `Mostrando ${propiedadesFiltradas.length} de ${propiedades.length} propiedades`;
    }

    function actualizarContadores() {
      // Actualizar contadores de operaci√≥n
      document.getElementById('countVenta').textContent = 
        propiedades.filter(p => (p.propiedad?.tipo_operacion || '').toLowerCase() === 'venta').length;
      document.getElementById('countRenta').textContent = 
        propiedades.filter(p => (p.propiedad?.tipo_operacion || '').toLowerCase() === 'renta').length;

      // Actualizar contadores de escrituras y cesi√≥n
      document.getElementById('countEscrituras').textContent = 
        propiedades.filter(p => p.legal && p.legal.escrituras === true).length;
      document.getElementById('countCesion').textContent = 
        propiedades.filter(p => p.legal && p.legal.cesion_derechos === true).length;

      // Actualizar contadores de amenidades
      document.querySelectorAll('#filterAmenidades input[type="checkbox"]').forEach(checkbox => {
        const amenidad = checkbox.value;
        const count = propiedades.filter(p => {
          if (!p.amenidades) return false;
          const amenidadObj = p.amenidades[amenidad];
          return amenidadObj && (
            amenidadObj.presente === true ||
            amenidadObj.presentes === true ||
            (Array.isArray(amenidadObj.tipos) && amenidadObj.tipos.length > 0)
          );
        }).length;
        
        const label = checkbox.parentElement;
        const textoOriginal = amenidad.replace(/_/g, ' ');
        label.textContent = `${textoOriginal} (${count})`;
        label.insertBefore(checkbox, label.firstChild);
      });

      // Actualizar contadores de caracter√≠sticas
      document.querySelectorAll('#filterCaracteristicas input[type="checkbox"]').forEach(checkbox => {
        const caracteristica = checkbox.value;
        const count = propiedades.filter(p => p.caracteristicas && p.caracteristicas[caracteristica] === true).length;
        
        const label = checkbox.parentElement;
        const textoOriginal = caracteristica.replace(/_/g, ' ');
        label.textContent = `${textoOriginal} (${count})`;
        label.insertBefore(checkbox, label.firstChild);
      });

      // Actualizar contadores de ciudad
      document.querySelectorAll('#filterCiudad input[type="checkbox"]').forEach(checkbox => {
        const ciudad = checkbox.value;
        const count = propiedades.filter(p => p.ubicacion?.ciudad === ciudad).length;
        
        const label = checkbox.parentElement;
        label.textContent = `${ciudad} (${count})`;
        label.insertBefore(checkbox, label.firstChild);
      });

      // Actualizar contadores de tipo de propiedad
      document.querySelectorAll('#filterTipoPropiedad input[type="checkbox"]').forEach(checkbox => {
        const tipo = checkbox.value;
        const count = propiedades.filter(p => p.propiedad?.tipo_propiedad === tipo).length;
        
        const label = checkbox.parentElement;
        label.textContent = `${tipo} (${count})`;
        label.insertBefore(checkbox, label.firstChild);
      });
    }

    // Funci√≥n para determinar el tipo de operaci√≥n
    function determinarTipoOperacion(propiedad) {
      try {
        // 1. Usar el tipo de operaci√≥n definido en la propiedad si existe
        if (propiedad.propiedad && propiedad.propiedad.tipo_operacion) {
          const tipoOperacion = propiedad.propiedad.tipo_operacion.toLowerCase();
          if (tipoOperacion === 'venta' || tipoOperacion === 'renta') {
            return tipoOperacion.charAt(0).toUpperCase() + tipoOperacion.slice(1);
          }
        }

        // 2. Obtener textos relevantes
        const textos = [];
        
        // Priorizar el t√≠tulo ya que suele ser m√°s preciso
        if (propiedad.titulo) textos.push(propiedad.titulo.toLowerCase());
        
        // Agregar otros textos disponibles
        if (propiedad.descripcion_original) textos.push(propiedad.descripcion_original.toLowerCase());
        if (propiedad.descripcion) {
          if (typeof propiedad.descripcion === 'object') {
            if (propiedad.descripcion.texto_original) textos.push(propiedad.descripcion.texto_original.toLowerCase());
            if (propiedad.descripcion.texto_limpio) textos.push(propiedad.descripcion.texto_limpio.toLowerCase());
          } else {
            textos.push(propiedad.descripcion.toLowerCase());
          }
        }
        
        const textoCompleto = textos.join(' ');

        // 3. Patrones espec√≠ficos de venta (ordenados por prioridad)
        const patronesVenta = [
          'se vende', 'en venta', 'vendo', 'vendemos',
          'precio de venta', 'casa en venta', 'propiedad en venta',
          'venta de casa', 'venta de propiedad', 'venta casa',
          'escrituras', 'cesion de derechos', 'cesi√≥n de derechos',
          'credito infonavit', 'cr√©dito infonavit', 'credito bancario',
          'acepto creditos', 'se aceptan creditos', 'precio a tratar',
          'oportunidad', 'inversi√≥n', 'inversion'
        ];

        // 4. Patrones espec√≠ficos de renta (ordenados por prioridad)
        const patronesRenta = [
          'se renta', 'en renta', 'rento', 'rentamos',
          'precio de renta', 'casa en renta', 'propiedad en renta',
          'renta de casa', 'renta de propiedad', 'renta casa',
          'mensual', 'mensualidad', 'mes de renta',
          'deposito', 'dep√≥sito', 'mes de garantia',
          'amueblado', 'sin muebles', 'temporal',
          'contrato', 'aval', 'renta mensual'
        ];

        // 5. Contar coincidencias con peso
        let puntajeVenta = 0;
        let puntajeRenta = 0;

        // Dar m√°s peso a coincidencias en el t√≠tulo
        const titulo = propiedad.titulo ? propiedad.titulo.toLowerCase() : '';
        patronesVenta.forEach((patron, index) => {
          if (titulo.includes(patron)) puntajeVenta += 3;
          if (textoCompleto.includes(patron)) puntajeVenta += 1;
        });

        patronesRenta.forEach((patron, index) => {
          if (titulo.includes(patron)) puntajeRenta += 3;
          if (textoCompleto.includes(patron)) puntajeRenta += 1;
        });

        // 6. Si hay una diferencia clara en puntajes, usar esa clasificaci√≥n
        if (puntajeVenta > puntajeRenta + 2) return 'Venta';
        if (puntajeRenta > puntajeVenta + 2) return 'Renta';

        // 7. Si los puntajes son similares, usar el precio como criterio
        let valorPrecio = 0;
        if (propiedad.propiedad && propiedad.propiedad.precio) {
          const precio = propiedad.propiedad.precio;
          if (typeof precio === 'object' && precio.valor) {
            valorPrecio = parseFloat(precio.valor);
          } else if (typeof precio === 'string' || typeof precio === 'number') {
            valorPrecio = parsePrecioTexto(precio.toString());
          }
        }

        if (valorPrecio > 0) {
          // Umbrales ajustados basados en el mercado actual
          const UMBRAL_VENTA_BAJO = 1000000;  // 1 mill√≥n de pesos
          const UMBRAL_RENTA_ALTO = 30000;    // 30 mil pesos mensuales

          if (valorPrecio >= UMBRAL_VENTA_BAJO) return 'Venta';
          if (valorPrecio <= UMBRAL_RENTA_ALTO) return 'Renta';
        }

        // 8. Si no hay suficiente informaci√≥n, marcar como desconocido
        return 'Desconocido';
      } catch (error) {
        console.error('Error determinando tipo de operaci√≥n:', error);
        return 'Desconocido';
      }
    }

    // Cargar datos al iniciar
    window.addEventListener('DOMContentLoaded', cargarDatos);
  </script>
</body>
</html>
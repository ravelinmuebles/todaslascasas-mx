#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
SERVIDOR API OPTIMIZADO PARA 50K PROPIEDADES
==========================================

Características:
- Paginación eficiente
- Cache de consultas frecuentes
- Filtrado por ciudad/tipo/precio
- Búsqueda de texto
- Compresión de respuestas
- Logs optimizados

"""

import json
import gzip
import logging
from flask import Flask, request, jsonify, Response
from flask_cors import CORS
from functools import lru_cache
from typing import Dict, List, Optional
import os
from datetime import datetime, timedelta

# Configuración
app = Flask(__name__)
CORS(app)

# Cache en memoria (para desarrollo, en producción usar Redis)
CACHE = {}
CACHE_TTL = {}
CACHE_DURATION = 300  # 5 minutos

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PropiedadesManager:
    def __init__(self, archivo_json: str):
        """Inicializa el gestor de propiedades."""
        self.archivo_json = archivo_json
        self.propiedades = []
        self.indices = {
            'ciudad': {},
            'tipo_propiedad': {},
            'tipo_operacion': {},
            'precio_rango': {}
        }
        self.cargar_datos()
        self.crear_indices()
    
    def cargar_datos(self):
        """Carga propiedades desde JSON."""
        try:
            logger.info(f"Cargando propiedades desde: {self.archivo_json}")
            with open(self.archivo_json, 'r', encoding='utf-8') as f:
                datos = json.load(f)
                self.propiedades = datos.get('propiedades', [])
            logger.info(f"Cargadas {len(self.propiedades)} propiedades")
        except Exception as e:
            logger.error(f"Error cargando propiedades: {e}")
            self.propiedades = []
    
    def crear_indices(self):
        """Crea índices para búsquedas rápidas."""
        logger.info("Creando índices...")
        
        for i, prop in enumerate(self.propiedades):
            # Índice por ciudad
            ciudad = prop.get('ubicacion', {}).get('ciudad', 'Sin ciudad')
            if ciudad not in self.indices['ciudad']:
                self.indices['ciudad'][ciudad] = []
            self.indices['ciudad'][ciudad].append(i)
            
            # Índice por tipo de propiedad
            tipo_prop = prop.get('propiedad', {}).get('tipo_propiedad', 'Sin tipo')
            if tipo_prop not in self.indices['tipo_propiedad']:
                self.indices['tipo_propiedad'][tipo_prop] = []
            self.indices['tipo_propiedad'][tipo_prop].append(i)
            
            # Índice por tipo de operación
            tipo_op = prop.get('propiedad', {}).get('tipo_operacion', 'Sin operación')
            if tipo_op not in self.indices['tipo_operacion']:
                self.indices['tipo_operacion'][tipo_op] = []
            self.indices['tipo_operacion'][tipo_op].append(i)
            
            # Índice por rango de precios
            precio = prop.get('propiedad', {}).get('precio', {}).get('valor', 0)
            rango = self.obtener_rango_precio(precio)
            if rango not in self.indices['precio_rango']:
                self.indices['precio_rango'][rango] = []
            self.indices['precio_rango'][rango].append(i)
        
        logger.info("Índices creados exitosamente")
    
    def obtener_rango_precio(self, precio: float) -> str:
        """Obtiene el rango de precio de una propiedad."""
        if precio < 500000:
            return "0-500k"
        elif precio < 1000000:
            return "500k-1M"
        elif precio < 2000000:
            return "1M-2M"
        elif precio < 5000000:
            return "2M-5M"
        else:
            return "5M+"
    
    def filtrar_propiedades(self, filtros: Dict) -> List[int]:
        """Filtra propiedades usando índices."""
        # Comenzar con todas las propiedades
        indices_validos = set(range(len(self.propiedades)))
        
        # Filtrar por ciudad
        if filtros.get('ciudad'):
            ciudad_indices = set(self.indices['ciudad'].get(filtros['ciudad'], []))
            indices_validos = indices_validos.intersection(ciudad_indices)
        
        # Filtrar por tipo de propiedad
        if filtros.get('tipo_propiedad'):
            tipo_indices = set(self.indices['tipo_propiedad'].get(filtros['tipo_propiedad'], []))
            indices_validos = indices_validos.intersection(tipo_indices)
        
        # Filtrar por tipo de operación
        if filtros.get('tipo_operacion'):
            op_indices = set(self.indices['tipo_operacion'].get(filtros['tipo_operacion'], []))
            indices_validos = indices_validos.intersection(op_indices)
        
        # Filtrar por rango de precio
        if filtros.get('precio_min') or filtros.get('precio_max'):
            precio_indices = set()
            for rango, indices in self.indices['precio_rango'].items():
                # Lógica simple de rangos (se puede mejorar)
                precio_indices.update(indices)
            indices_validos = indices_validos.intersection(precio_indices)
        
        return list(indices_validos)
    
    def obtener_propiedad_simplificada(self, indice: int) -> Dict:
        """Obtiene una versión simplificada de la propiedad para listados."""
        prop = self.propiedades[indice]
        return {
            'id': prop.get('id'),
            'titulo': prop.get('titulo', '')[:100],  # Limitar título
            'precio': prop.get('propiedad', {}).get('precio', {}),
            'tipo_propiedad': prop.get('propiedad', {}).get('tipo_propiedad'),
            'tipo_operacion': prop.get('propiedad', {}).get('tipo_operacion'),
            'ciudad': prop.get('ubicacion', {}).get('ciudad'),
            'colonia': prop.get('ubicacion', {}).get('colonia'),
            'imagen_portada': prop.get('imagen_portada', {}),
            'caracteristicas': {
                'recamaras': prop.get('caracteristicas', {}).get('recamaras'),
                'banos': prop.get('caracteristicas', {}).get('banos'),
                'estacionamientos': prop.get('caracteristicas', {}).get('estacionamientos')
            }
        }

# Inicializar gestor de propiedades
propiedades_manager = PropiedadesManager('resultados/propiedades_estructuradas.json')

def is_cache_valid(cache_key: str) -> bool:
    """Verifica si el cache sigue vigente."""
    if cache_key not in CACHE_TTL:
        return False
    return datetime.now() < CACHE_TTL[cache_key]

def set_cache(cache_key: str, data):
    """Guarda datos en cache."""
    CACHE[cache_key] = data
    CACHE_TTL[cache_key] = datetime.now() + timedelta(seconds=CACHE_DURATION)

def get_cache(cache_key: str):
    """Obtiene datos del cache."""
    if is_cache_valid(cache_key):
        return CACHE[cache_key]
    return None

def comprimir_respuesta(data) -> Response:
    """Comprime la respuesta JSON."""
    json_str = json.dumps(data, ensure_ascii=False)
    compressed = gzip.compress(json_str.encode('utf-8'))
    
    response = Response(compressed)
    response.headers['Content-Type'] = 'application/json'
    response.headers['Content-Encoding'] = 'gzip'
    return response

@app.route('/api/propiedades', methods=['GET'])
def obtener_propiedades():
    """Endpoint principal para obtener propiedades con paginación."""
    try:
        # Parámetros de paginación
        pagina = int(request.args.get('pagina', 1))
        por_pagina = min(int(request.args.get('por_pagina', 20)), 100)  # Máximo 100
        
        # Filtros
        filtros = {
            'ciudad': request.args.get('ciudad'),
            'tipo_propiedad': request.args.get('tipo_propiedad'),
            'tipo_operacion': request.args.get('tipo_operacion'),
            'precio_min': request.args.get('precio_min', type=float),
            'precio_max': request.args.get('precio_max', type=float),
        }
        
        # Crear clave de cache
        cache_key = f"propiedades_{pagina}_{por_pagina}_{hash(str(filtros))}"
        
        # Intentar obtener del cache
        cached_result = get_cache(cache_key)
        if cached_result:
            return comprimir_respuesta(cached_result)
        
        # Filtrar propiedades
        indices_filtrados = propiedades_manager.filtrar_propiedades(filtros)
        total = len(indices_filtrados)
        
        # Calcular paginación
        inicio = (pagina - 1) * por_pagina
        fin = inicio + por_pagina
        indices_pagina = indices_filtrados[inicio:fin]
        
        # Obtener propiedades simplificadas
        propiedades = [
            propiedades_manager.obtener_propiedad_simplificada(i) 
            for i in indices_pagina
        ]
        
        resultado = {
            'propiedades': propiedades,
            'total': total,
            'pagina': pagina,
            'por_pagina': por_pagina,
            'total_paginas': (total + por_pagina - 1) // por_pagina,
            'tiene_siguiente': fin < total,
            'tiene_anterior': pagina > 1
        }
        
        # Guardar en cache
        set_cache(cache_key, resultado)
        
        return comprimir_respuesta(resultado)
        
    except Exception as e:
        logger.error(f"Error en obtener_propiedades: {e}")
        return jsonify({'error': 'Error interno del servidor'}), 500

@app.route('/api/propiedades/<propiedad_id>', methods=['GET'])
def obtener_propiedad_detalle(propiedad_id: str):
    """Obtiene los detalles completos de una propiedad."""
    try:
        # Buscar propiedad por ID
        for prop in propiedades_manager.propiedades:
            if prop.get('id') == propiedad_id:
                return comprimir_respuesta(prop)
        
        return jsonify({'error': 'Propiedad no encontrada'}), 404
        
    except Exception as e:
        logger.error(f"Error en obtener_propiedad_detalle: {e}")
        return jsonify({'error': 'Error interno del servidor'}), 500

@app.route('/api/estadisticas', methods=['GET'])
def obtener_estadisticas():
    """Obtiene estadísticas generales del catálogo."""
    try:
        cache_key = "estadisticas_general"
        cached_result = get_cache(cache_key)
        if cached_result:
            return jsonify(cached_result)
        
        stats = {
            'total_propiedades': len(propiedades_manager.propiedades),
            'por_ciudad': {ciudad: len(indices) for ciudad, indices in propiedades_manager.indices['ciudad'].items()},
            'por_tipo': {tipo: len(indices) for tipo, indices in propiedades_manager.indices['tipo_propiedad'].items()},
            'por_operacion': {op: len(indices) for op, indices in propiedades_manager.indices['tipo_operacion'].items()},
            'por_rango_precio': {rango: len(indices) for rango, indices in propiedades_manager.indices['precio_rango'].items()}
        }
        
        set_cache(cache_key, stats)
        return jsonify(stats)
        
    except Exception as e:
        logger.error(f"Error en obtener_estadisticas: {e}")
        return jsonify({'error': 'Error interno del servidor'}), 500

@app.route('/api/buscar', methods=['GET'])
def buscar_propiedades():
    """Búsqueda de texto en propiedades."""
    try:
        termino = request.args.get('q', '').lower()
        if not termino or len(termino) < 2:
            return jsonify({'error': 'Término de búsqueda muy corto'}), 400
        
        pagina = int(request.args.get('pagina', 1))
        por_pagina = min(int(request.args.get('por_pagina', 20)), 100)
        
        # Buscar en títulos y descripciones
        resultados = []
        for i, prop in enumerate(propiedades_manager.propiedades):
            titulo = prop.get('titulo', '').lower()
            descripcion = prop.get('descripcion_original', '').lower()
            
            if termino in titulo or termino in descripcion:
                resultados.append(i)
        
        # Paginar resultados
        total = len(resultados)
        inicio = (pagina - 1) * por_pagina
        fin = inicio + por_pagina
        indices_pagina = resultados[inicio:fin]
        
        propiedades = [
            propiedades_manager.obtener_propiedad_simplificada(i) 
            for i in indices_pagina
        ]
        
        resultado = {
            'propiedades': propiedades,
            'total': total,
            'pagina': pagina,
            'por_pagina': por_pagina,
            'total_paginas': (total + por_pagina - 1) // por_pagina,
            'termino': termino
        }
        
        return comprimir_respuesta(resultado)
        
    except Exception as e:
        logger.error(f"Error en buscar_propiedades: {e}")
        return jsonify({'error': 'Error interno del servidor'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Endpoint de salud del servicio."""
    return jsonify({
        'status': 'healthy',
        'propiedades_cargadas': len(propiedades_manager.propiedades),
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    # Configuración para desarrollo
    app.run(host='0.0.0.0', port=5001, debug=False) 
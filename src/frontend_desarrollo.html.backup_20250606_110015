<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Catálogo de Propiedades - Desarrollo Local</title>
    <style>
        :root {
            --primary: #2563eb;
            --secondary: #64748b;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --light: #f8fafc;
            --dark: #1e293b;
            --border: #e2e8f0;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif;
            background: var(--light);
            color: var(--dark);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        /* Header con estado del sistema */
        .header {
            background: var(--primary);
            color: white;
            padding: 1rem 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .header h1 {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .header-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: rgba(255,255,255,0.1);
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--success);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .stats-row {
            display: flex;
            gap: 2rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .stat {
            background: rgba(255,255,255,0.1);
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.9rem;
        }

        /* Layout principal */
        .main-layout {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 2rem;
            margin-top: 2rem;
            min-height: calc(100vh - 140px);
            align-items: start;
        }

        /* Panel de filtros mejorado - FIJO */
        .filters-panel {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            height: calc(100vh - 160px);
            overflow-y: auto;
            overflow-x: hidden;
            position: sticky;
            top: 2rem;
        }

        .filters-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border);
        }

        .filter-group {
            margin-bottom: 1.5rem;
        }

        .filter-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .filter-group select,
        .filter-group input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border);
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .filter-group select:focus,
        .filter-group input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .price-range {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
        }

        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: background 0.2s;
            width: 100%;
        }

        .btn:hover {
            background: #1d4ed8;
        }

        .btn-secondary {
            background: var(--secondary);
        }

        .btn-secondary:hover {
            background: #475569;
        }

        .btn-small {
            padding: 0.5rem 1rem;
            font-size: 0.8rem;
        }

        /* Checkbox groups */
        .checkbox-group {
            max-height: 150px;
            overflow-y: auto;
            overflow-x: hidden;
            border: 1px solid var(--border);
            border-radius: 6px;
            padding: 0.5rem;
            background: #fafafa;
            word-wrap: break-word;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
            padding: 0.25rem;
            border-radius: 4px;
            transition: background 0.2s;
        }

        .checkbox-item:hover {
            background: rgba(37, 99, 235, 0.1);
        }

        .checkbox-item:last-child {
            margin-bottom: 0;
        }

        .checkbox-item input[type="checkbox"] {
            margin-right: 0.5rem;
            width: 16px;
            height: 16px;
            accent-color: var(--primary);
        }

        .checkbox-item label {
            margin-bottom: 0;
            cursor: pointer;
            font-weight: normal;
            flex: 1;
            text-transform: capitalize;
            font-size: 0.9rem;
        }

        .checkbox-count {
            color: var(--secondary);
            font-size: 0.8rem;
            margin-left: 0.5rem;
        }

        /* Área de contenido */
        .content-area {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .content-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .search-controls {
            display: flex;
            gap: 1rem;
            flex: 1;
            max-width: 600px;
        }

        .search-box {
            flex: 1;
        }

        .search-box input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border);
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .results-info {
            color: var(--secondary);
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .loading {
            display: none;
            color: var(--warning);
        }

        /* Grid de propiedades mejorado - 3 COLUMNAS */
        .properties-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
            padding: 1.5rem;
            min-height: 400px;
        }

        .property-card {
            border: 1px solid var(--border);
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.2s, box-shadow 0.2s;
            background: white;
            display: flex;
            flex-direction: column;
        }

        .property-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .property-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            background: linear-gradient(135deg, #f0f0f0 0%, #e0e0e0 100%);
            position: relative;
        }

        .image-container {
            position: relative;
            overflow: hidden;
        }

        .operation-tag {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.7rem;
            font-weight: 600;
            text-transform: uppercase;
            color: white;
            z-index: 2;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .operation-tag.venta {
            background: linear-gradient(135deg, #059669 0%, #047857 100%);
        }

        .operation-tag.renta {
            background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
        }

        .operation-tag.desconocido {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        }

        .property-content {
            padding: 1.25rem;
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .property-link {
            display: block;
            text-decoration: none;
            color: inherit;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .property-link:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .property-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark);
            line-height: 1.4;
            height: 2.8rem;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
        }

        .property-address {
            color: #374151;
            font-size: 0.85rem;
            font-weight: 500;
            margin-bottom: 0.25rem;
            line-height: 1.3;
            opacity: 0.8;
        }

        .property-location {
            color: var(--secondary);
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .property-price {
            font-size: 1.3rem;
            font-weight: 700;
            color: var(--success);
            margin-bottom: 1rem;
        }

        .property-features {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.5rem;
            margin-top: auto;
        }

        .feature {
            text-align: center;
            padding: 0.5rem;
            background: var(--light);
            border-radius: 4px;
            font-size: 0.8rem;
        }

        .feature-value {
            display: block;
            font-weight: 600;
            color: var(--primary);
        }

        /* Paginación */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            padding: 2rem;
            border-top: 1px solid var(--border);
        }

        .pagination button {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border);
            background: white;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .pagination button:hover:not(:disabled) {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination .current-page {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        /* Estados de carga y error */
        .message {
            text-align: center;
            padding: 3rem;
            color: var(--secondary);
        }

        .error {
            color: var(--danger);
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
            border-radius: 6px;
            padding: 1rem;
            margin: 1rem;
        }

        /* Responsive */
        @media (max-width: 1200px) {
            .properties-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 768px) {
            .main-layout {
                grid-template-columns: 1fr;
            }
            
            .filters-panel {
                position: static;
                height: auto;
                max-height: 300px;
            }
            
            .properties-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="container">
            <h1>Catálogo de Propiedades - Desarrollo Local</h1>
            <div class="header-info">
                <div class="status-indicator">
                    <div class="status-dot"></div>
                    <span>API: <span id="api-status">Conectando...</span></span>
                </div>
                <div class="status-indicator">
                    <span>Servidor: http://localhost:5001</span>
                </div>
            </div>
            <div class="stats-row">
                <div class="stat">Total: <span id="total-propiedades">-</span></div>
                <div class="stat">Mostrando: <span id="mostrando">0</span></div>
                <div class="stat">Página: <span id="pagina-actual">1</span></div>
                <div class="stat">Tiempo: <span id="tiempo-carga">-</span>ms</div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="main-layout">
            <!-- Panel de filtros -->
            <div class="filters-panel">
                <div class="filters-header">
                    <h3>Filtros</h3>
                </div>
                
                <button class="btn btn-small btn-secondary" onclick="limpiarFiltros()" style="width: 100%; margin-bottom: 1rem;">Limpiar Filtros</button>

                <div class="filter-group">
                    <label>Rango de Precio</label>
                    <div class="price-range">
                        <input type="number" id="precio_min" placeholder="Mínimo">
                        <input type="number" id="precio_max" placeholder="Máximo">
                    </div>
                </div>

                <div class="filter-group">
                    <label for="busqueda">Búsqueda</label>
                    <input type="text" id="busqueda" placeholder="Buscar por título...">
                </div>

                <div class="filter-group">
                    <label>Ciudad</label>
                    <div class="checkbox-group" id="ciudades-container">
                        <!-- Se llenarán dinámicamente -->
                    </div>
                </div>

                <div class="filter-group">
                    <label>Tipo de Propiedad</label>
                    <div class="checkbox-group" id="tipos-container">
                        <!-- Se llenarán dinámicamente -->
                    </div>
                </div>

                <div class="filter-group">
                    <label>Operación</label>
                    <div class="checkbox-group" id="operaciones-container">
                        <!-- Se llenarán dinámicamente -->
                    </div>
                </div>

                <div class="filter-group">
                    <label for="por_pagina">Propiedades por página</label>
                    <select id="por_pagina">
                        <option value="12">12</option>
                        <option value="24" selected>24</option>
                        <option value="48">48</option>
                    </select>
                </div>

                <button class="btn" onclick="aplicarFiltros()">Aplicar Filtros</button>
            </div>

            <!-- Área de contenido -->
            <div class="content-area">
                <div class="content-header">
                    <div class="search-controls">
                        <div class="search-box">
                            <input type="text" id="busqueda-rapida" placeholder="Búsqueda rápida..." 
                                   onkeyup="busquedaRapida(this.value)">
                        </div>
                        <button class="btn" onclick="buscarPropiedades()">Buscar</button>
                    </div>
                    <div class="results-info">
                        <span id="info-resultados">Cargando...</span>
                        <span class="loading" id="loading">⏳ Cargando...</span>
                    </div>
                </div>

                <div class="properties-grid" id="propiedades-grid">
                    <div class="message">Cargando propiedades...</div>
                </div>

                <div class="pagination" id="paginacion" style="display: none;">
                    <button onclick="cambiarPagina(paginaActual - 1)" id="btn-anterior">← Anterior</button>
                    <span>Página <span id="pagina-info">1</span> de <span id="total-paginas">1</span></span>
                    <button onclick="cambiarPagina(paginaActual + 1)" id="btn-siguiente">Siguiente →</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuración
        const API_BASE = 'http://localhost:5001/api';
        let paginaActual = 1;
        let totalPaginas = 1;
        let filtrosActivos = {};
        let timeoutBusqueda = null;

        // Variables de estado
        let propiedadesTotales = 0;
        let tiempoInicio = 0;

        // Inicialización
        document.addEventListener('DOMContentLoaded', function() {
            verificarAPI();
            cargarEstadisticas();
            cargarPropiedades();
            
            // Event listeners para filtros
            document.getElementById('busqueda').addEventListener('keyup', function(e) {
                if (e.key === 'Enter') aplicarFiltros();
            });
            
            document.getElementById('busqueda-rapida').addEventListener('keyup', function(e) {
                if (e.key === 'Enter') buscarPropiedades();
            });
        });

        // Verificar conexión con API
        async function verificarAPI() {
            try {
                const response = await fetch(`${API_BASE}/../health`);
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('api-status').textContent = 'Conectado ✅';
                    document.getElementById('total-propiedades').textContent = data.propiedades_cargadas.toLocaleString();
                } else {
                    throw new Error('API no responde');
                }
            } catch (error) {
                document.getElementById('api-status').textContent = 'Error ❌';
                mostrarError('No se puede conectar con el servidor API. Asegúrate de que esté ejecutándose en localhost:5000');
            }
        }

        // Cargar estadísticas para filtros
        async function cargarEstadisticas() {
            try {
                const response = await fetch(`${API_BASE}/estadisticas`);
                const stats = await response.json();
                
                // Poblar filtros con checkboxes
                poblarCheckboxes('ciudades-container', Object.keys(stats.por_ciudad), stats.por_ciudad);
                poblarCheckboxes('tipos-container', Object.keys(stats.por_tipo), stats.por_tipo);
                poblarCheckboxes('operaciones-container', Object.keys(stats.por_operacion), stats.por_operacion);
            } catch (error) {
                console.error('Error cargando estadísticas:', error);
            }
        }

        // Poblar checkboxes con opciones
        function poblarCheckboxes(containerId, opciones, estadisticas) {
            const container = document.getElementById(containerId);
            container.innerHTML = '';
            
            // Ordenar opciones por cantidad (mayor a menor)
            const opcionesOrdenadas = Object.entries(estadisticas || {})
                .filter(([opcion, count]) => opcion && opcion !== 'Sin ciudad' && opcion !== 'Sin tipo' && opcion !== 'Sin operación')
                .sort((a, b) => b[1] - a[1])
                .map(([opcion, count]) => ({ opcion, count }));
            
            opcionesOrdenadas.forEach(({ opcion, count }) => {
                const checkboxItem = document.createElement('div');
                checkboxItem.className = 'checkbox-item';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.id = `${containerId}_${opcion}`;
                checkbox.value = opcion;
                checkbox.addEventListener('change', aplicarFiltros);
                
                const label = document.createElement('label');
                label.htmlFor = checkbox.id;
                label.textContent = opcion.charAt(0).toUpperCase() + opcion.slice(1);
                
                const countSpan = document.createElement('span');
                countSpan.className = 'checkbox-count';
                countSpan.textContent = `(${count.toLocaleString()})`;
                
                checkboxItem.appendChild(checkbox);
                checkboxItem.appendChild(label);
                checkboxItem.appendChild(countSpan);
                
                container.appendChild(checkboxItem);
            });
        }

        // Cargar propiedades
        async function cargarPropiedades(pagina = 1) {
            tiempoInicio = Date.now();
            mostrarCargando(true);
            
            try {
                const params = new URLSearchParams({
                    pagina: pagina,
                    por_pagina: document.getElementById('por_pagina').value
                });
                
                // Agregar filtros activos
                if (filtrosActivos.ciudades && filtrosActivos.ciudades.length > 0) {
                    params.set('ciudades', filtrosActivos.ciudades.join(','));
                }
                if (filtrosActivos.tipos && filtrosActivos.tipos.length > 0) {
                    params.set('tipos', filtrosActivos.tipos.join(','));
                }
                if (filtrosActivos.operaciones && filtrosActivos.operaciones.length > 0) {
                    params.set('operaciones', filtrosActivos.operaciones.join(','));
                }
                if (filtrosActivos.precio_min) {
                    params.set('precio_min', filtrosActivos.precio_min);
                }
                if (filtrosActivos.precio_max) {
                    params.set('precio_max', filtrosActivos.precio_max);
                }

                const response = await fetch(`${API_BASE}/propiedades?${params}`);
                
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                mostrarPropiedades(data.propiedades);
                actualizarPaginacion(data);
                actualizarStats(data);
                
                paginaActual = data.pagina;
                totalPaginas = data.total_paginas;
                
            } catch (error) {
                console.error('Error cargando propiedades:', error);
                mostrarError('Error cargando propiedades: ' + error.message);
            } finally {
                mostrarCargando(false);
            }
        }

        // Generar título descriptivo para la propiedad
        function generarTituloDescriptivo(prop) {
            // Si el título es genérico o poco descriptivo, crear uno mejor
            const titulo = prop.titulo || '';
            if (titulo === 'Notificaciones' || titulo.length < 10 || !titulo.trim()) {
                const partes = [];
                
                // Agregar tipo de propiedad y operación
                if (prop.tipo_propiedad) partes.push(prop.tipo_propiedad);
                if (prop.tipo_operacion) partes.push(`en ${prop.tipo_operacion}`);
                
                // Agregar ubicación
                if (prop.colonia) partes.push(`en ${prop.colonia}`);
                else if (prop.ciudad) partes.push(`en ${prop.ciudad}`);
                
                // Agregar características destacadas
                const caracteristicas = [];
                if (prop.caracteristicas?.recamaras) caracteristicas.push(`${prop.caracteristicas.recamaras} rec`);
                if (prop.caracteristicas?.banos) caracteristicas.push(`${prop.caracteristicas.banos} baños`);
                
                if (caracteristicas.length > 0) {
                    partes.push(`- ${caracteristicas.join(', ')}`);
                }
                
                return partes.join(' ') || 'Propiedad Disponible';
            }
            
            return titulo;
        }

        // Obtener URL de imagen correcta
        function obtenerImagenUrl(prop) {
            const imagenPortada = prop.imagen_portada;
            if (!imagenPortada) return 'http://localhost:5001/Imagen_no_disponible.jpg';
            
            // Si tiene ruta relativa, usar el servidor para servir la imagen
            if (imagenPortada.ruta_relativa) {
                return `http://localhost:5001/resultados/${imagenPortada.ruta_relativa}`;
            }
            
            // Si tiene nombre de archivo, intentar construir ruta
            if (imagenPortada.nombre_archivo) {
                return `http://localhost:5001/resultados/imagenes/${imagenPortada.nombre_archivo}`;
            }
            
            // Si tiene URL directa
            if (imagenPortada.url && imagenPortada.url.startsWith('http')) {
                return imagenPortada.url;
            }
            
            return 'http://localhost:5001/Imagen_no_disponible.jpg';
        }

        // Obtener clase CSS para el tag de operación
        function obtenerClaseOperacion(operacion) {
            if (!operacion) return 'desconocido';
            const op = operacion.toLowerCase();
            if (op.includes('venta')) return 'venta';
            if (op.includes('renta')) return 'renta';
            return 'desconocido';
        }

        // Mostrar propiedades en el grid
        function mostrarPropiedades(propiedades) {
            const grid = document.getElementById('propiedades-grid');
            
            if (!propiedades || propiedades.length === 0) {
                grid.innerHTML = '<div class="message">No se encontraron propiedades</div>';
                return;
            }

            grid.innerHTML = propiedades.map(prop => `
                <div class="property-card" onclick="verDetalle('${prop.id}')">
                    <a href="${prop.url || '#'}" target="_blank" rel="noopener noreferrer" class="property-link">
                        <div class="image-container">
                            <img class="property-image" 
                                 src="${obtenerImagenUrl(prop)}" 
                                 alt="${generarTituloDescriptivo(prop)}" 
                                 onerror="this.src='http://localhost:5001/Imagen_no_disponible.jpg'"
                                 loading="lazy">
                            <div class="operation-tag ${obtenerClaseOperacion(prop.tipo_operacion)}">
                                ${prop.tipo_operacion || 'N/A'}
                            </div>
                        </div>
                        <div class="property-content">
                            <h3 class="property-title">${generarTituloDescriptivo(prop)}</h3>
                            <p class="property-address">${obtenerDireccionCompleta(prop)}</p>
                            <p class="property-location">${formatearUbicacion(prop)}</p>
                            <p class="property-price">${formatearPrecio(prop.precio)}</p>
                            <div class="property-features">
                                <div class="feature">
                                    <span class="feature-value">${prop.caracteristicas?.recamaras || '?'}</span>
                                    Recámaras
                                </div>
                                <div class="feature">
                                    <span class="feature-value">${prop.caracteristicas?.banos || '?'}</span>
                                    Baños
                                </div>
                                <div class="feature">
                                    <span class="feature-value">${prop.caracteristicas?.estacionamientos || '?'}</span>
                                    Autos
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            `).join('');
        }

        // Formatear ubicación
        function formatearUbicacion(prop) {
            const partes = [];
            if (prop.colonia) partes.push(prop.colonia);
            if (prop.ciudad) partes.push(prop.ciudad);
            return partes.join(', ') || 'Ubicación no especificada';
        }

        // Obtener dirección completa
        function obtenerDireccionCompleta(prop) {
            // Buscar en la estructura de ubicacion primero
            if (prop.ubicacion && prop.ubicacion.direccion_completa) {
                return prop.ubicacion.direccion_completa;
            }
            
            // Si no está disponible, construir desde partes
            const partes = [];
            if (prop.colonia) partes.push(prop.colonia);
            if (prop.ciudad) partes.push(prop.ciudad);
            return partes.join(', ') || 'Dirección no disponible';
        }

        // Formatear precio - MOSTRAR CIFRA COMPLETA
        function formatearPrecio(precio) {
            if (!precio || !precio.valor) return 'Precio no disponible';
            
            // Usar el formato ya procesado si está disponible
            if (precio.formato) {
                return precio.formato;
            }
            
            // Si no, formatear manualmente con cifra completa
            const valor = precio.valor;
            const moneda = precio.moneda === 'USD' ? '$' : '$';
            return `${moneda}${valor.toLocaleString('es-MX')}`;
        }

        // Actualizar paginación
        function actualizarPaginacion(data) {
            const paginacion = document.getElementById('paginacion');
            const btnAnterior = document.getElementById('btn-anterior');
            const btnSiguiente = document.getElementById('btn-siguiente');
            
            document.getElementById('pagina-info').textContent = data.pagina;
            document.getElementById('total-paginas').textContent = data.total_paginas;
            
            btnAnterior.disabled = !data.tiene_anterior;
            btnSiguiente.disabled = !data.tiene_siguiente;
            
            paginacion.style.display = data.total_paginas > 1 ? 'flex' : 'none';
        }

        // Actualizar estadísticas
        function actualizarStats(data) {
            const tiempoFinal = Date.now() - tiempoInicio;
            document.getElementById('mostrando').textContent = data.propiedades.length;
            document.getElementById('pagina-actual').textContent = data.pagina;
            document.getElementById('tiempo-carga').textContent = tiempoFinal;
            document.getElementById('info-resultados').textContent = 
                `${data.total.toLocaleString()} propiedades encontradas`;
        }

        // Cambiar página
        function cambiarPagina(nuevaPagina) {
            if (nuevaPagina >= 1 && nuevaPagina <= totalPaginas) {
                cargarPropiedades(nuevaPagina);
            }
        }

        // Obtener valores seleccionados de checkboxes
        function obtenerCheckboxesSeleccionados(containerId) {
            const container = document.getElementById(containerId);
            const checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');
            return Array.from(checkboxes).map(cb => cb.value);
        }

        // Aplicar filtros
        function aplicarFiltros() {
            filtrosActivos = {};
            
            // Recoger valores de filtros de checkboxes
            const ciudadesSeleccionadas = obtenerCheckboxesSeleccionados('ciudades-container');
            const tiposSeleccionados = obtenerCheckboxesSeleccionados('tipos-container');
            const operacionesSeleccionadas = obtenerCheckboxesSeleccionados('operaciones-container');
            
            // Recoger valores de campos de texto
            const precioMin = document.getElementById('precio_min').value;
            const precioMax = document.getElementById('precio_max').value;
            
            // Solo aplicar filtros si hay selecciones
            if (ciudadesSeleccionadas.length > 0) filtrosActivos.ciudades = ciudadesSeleccionadas;
            if (tiposSeleccionados.length > 0) filtrosActivos.tipos = tiposSeleccionados;
            if (operacionesSeleccionadas.length > 0) filtrosActivos.operaciones = operacionesSeleccionadas;
            if (precioMin) filtrosActivos.precio_min = precioMin;
            if (precioMax) filtrosActivos.precio_max = precioMax;
            
            cargarPropiedades(1);
        }

        // Limpiar filtros
        function limpiarFiltros() {
            // Limpiar checkboxes
            document.querySelectorAll('.checkbox-group input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
            });
            
            // Limpiar campos de texto
            document.getElementById('precio_min').value = '';
            document.getElementById('precio_max').value = '';
            document.getElementById('busqueda').value = '';
            document.getElementById('busqueda-rapida').value = '';
            
            filtrosActivos = {};
            cargarPropiedades(1);
        }

        // Búsqueda rápida
        function busquedaRapida(termino) {
            clearTimeout(timeoutBusqueda);
            timeoutBusqueda = setTimeout(() => {
                if (termino.length >= 2) {
                    buscarPropiedades(termino);
                } else if (termino.length === 0) {
                    cargarPropiedades(1);
                }
            }, 500);
        }

        // Buscar propiedades
        async function buscarPropiedades(termino = null) {
            const terminoBusqueda = termino || document.getElementById('busqueda-rapida').value;
            
            if (!terminoBusqueda || terminoBusqueda.length < 2) {
                cargarPropiedades(1);
                return;
            }

            tiempoInicio = Date.now();
            mostrarCargando(true);
            
            try {
                const params = new URLSearchParams({
                    q: terminoBusqueda,
                    pagina: 1,
                    por_pagina: document.getElementById('por_pagina').value
                });

                const response = await fetch(`${API_BASE}/buscar?${params}`);
                const data = await response.json();
                
                mostrarPropiedades(data.propiedades);
                actualizarPaginacion(data);
                actualizarStats(data);
                
            } catch (error) {
                console.error('Error en búsqueda:', error);
                mostrarError('Error en la búsqueda: ' + error.message);
            } finally {
                mostrarCargando(false);
            }
        }

        // Ver detalle de propiedad
        function verDetalle(propiedadId) {
            // Abrir en nueva ventana o mostrar modal
            const url = `${API_BASE}/propiedades/${propiedadId}`;
            window.open(url, '_blank');
        }

        // Mostrar/ocultar indicador de carga
        function mostrarCargando(mostrar) {
            const loading = document.getElementById('loading');
            loading.style.display = mostrar ? 'block' : 'none';
        }

        // Mostrar mensaje de error
        function mostrarError(mensaje) {
            const grid = document.getElementById('propiedades-grid');
            grid.innerHTML = `<div class="error">${mensaje}</div>`;
        }
    </script>
</body>
</html> 